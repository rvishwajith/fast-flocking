#pragma kernel CSMain
static const int THREAD_GROUP_SIZE = 1024;

struct SchoolEntity {
    float3 position;
    float3 direction;
    float3 flockHeading;
    float3 flockCentre;
    float3 separationHeading;
    int neighborCount;
};

RWStructuredBuffer<SchoolEntity> entities;
uint entityCount;
float perceptionRadius;
float avoidRadius;

[numthreads(THREAD_GROUP_SIZE,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    for (uint indexB = 0; indexB < entityCount; indexB++) {
        if (id.x != indexB) {
            SchoolEntity boidB = entities[indexB];
            float3 offset = boidB.position - entities[id.x].position;
            float sqrDst = (offset.x * offset.x) + (offset.y * offset.y) + (offset.z * offset.z);

            if (sqrDst < (perceptionRadius * perceptionRadius)) {
                entities[id.x].neighborCount += 1;
                entities[id.x].flockHeading += boidB.direction;
                entities[id.x].flockCentre += boidB.position;
                if (sqrDst < avoidRadius * avoidRadius) {
                    entities[id.x].separationHeading -= offset / sqrDst;
                }
            }
        }
    }
}